{"ast":null,"code":"import { meals, mealCategories, dietaryTags } from '../data/meals';\nexport const getMealsByFilters = ({\n  categories = [],\n  tags = [],\n  searchQuery = '',\n  maxCalories = null,\n  maxPrepTime = null\n}) => {\n  return meals.filter(meal => {\n    // Filter by categories\n    if (categories.length > 0 && !meal.category.some(c => categories.includes(c))) {\n      return false;\n    }\n\n    // Filter by tags\n    if (tags.length > 0 && !meal.tags.some(t => tags.includes(t))) {\n      return false;\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      const matchesName = meal.name.toLowerCase().includes(query);\n      const matchesDescription = meal.description.toLowerCase().includes(query);\n      const matchesTags = meal.tags.some(tag => tag.toLowerCase().includes(query));\n      if (!matchesName && !matchesDescription && !matchesTags) {\n        return false;\n      }\n    }\n\n    // Filter by max calories\n    if (maxCalories && meal.dietaryInfo.calories > maxCalories) {\n      return false;\n    }\n\n    // Filter by max prep time\n    if (maxPrepTime && meal.prepTime > maxPrepTime) {\n      return false;\n    }\n    return true;\n  });\n};\nexport const generateMealPlan = ({\n  selectedDates = [],\n  selectedMealTypes = [],\n  preferences = '',\n  dietaryRestrictions = [],\n  calorieTarget = null\n}) => {\n  // Filter meals based on preferences and restrictions\n  let availableMeals = getMealsByFilters({\n    categories: selectedMealTypes,\n    tags: dietaryRestrictions,\n    maxCalories: calorieTarget\n  });\n\n  // Create a meal plan for each day\n  const mealPlan = selectedDates.map(date => {\n    const dayPlan = {};\n    selectedMealTypes.forEach(mealType => {\n      // Filter meals for this specific meal type\n      const mealsForType = availableMeals.filter(meal => meal.category.includes(mealType));\n\n      // Randomly select a meal for this type\n      const randomIndex = Math.floor(Math.random() * mealsForType.length);\n      dayPlan[mealType] = mealsForType[randomIndex];\n    });\n    return {\n      date,\n      meals: dayPlan\n    };\n  });\n  return mealPlan;\n};\nexport const getMealCategories = () => mealCategories;\nexport const getDietaryTags = () => dietaryTags;\nexport const getMealById = id => meals.find(meal => meal.id === id);\nexport const getRelatedMeals = (meal, limit = 3) => {\n  if (!meal) return [];\n\n  // Find meals with similar tags or categories\n  const relatedMeals = meals.filter(m => m.id !== meal.id) // Exclude the current meal\n  .map(m => {\n    // Calculate similarity score based on shared tags and categories\n    const sharedTags = m.tags.filter(tag => meal.tags.includes(tag)).length;\n    const sharedCategories = m.category.filter(cat => meal.category.includes(cat)).length;\n    return {\n      ...m,\n      similarityScore: sharedTags * 2 + sharedCategories // Tags are weighted more heavily\n    };\n  }).sort((a, b) => b.similarityScore - a.similarityScore).slice(0, limit);\n  return relatedMeals;\n};","map":{"version":3,"names":["meals","mealCategories","dietaryTags","getMealsByFilters","categories","tags","searchQuery","maxCalories","maxPrepTime","filter","meal","length","category","some","c","includes","t","query","toLowerCase","matchesName","name","matchesDescription","description","matchesTags","tag","dietaryInfo","calories","prepTime","generateMealPlan","selectedDates","selectedMealTypes","preferences","dietaryRestrictions","calorieTarget","availableMeals","mealPlan","map","date","dayPlan","forEach","mealType","mealsForType","randomIndex","Math","floor","random","getMealCategories","getDietaryTags","getMealById","id","find","getRelatedMeals","limit","relatedMeals","m","sharedTags","sharedCategories","cat","similarityScore","sort","a","b","slice"],"sources":["/Users/zacharyjeffreys/Documents/GitHub/MealBuddy/src/services/mealService.js"],"sourcesContent":["import { meals, mealCategories, dietaryTags } from '../data/meals';\n\nexport const getMealsByFilters = ({\n  categories = [],\n  tags = [],\n  searchQuery = '',\n  maxCalories = null,\n  maxPrepTime = null,\n}) => {\n  return meals.filter(meal => {\n    // Filter by categories\n    if (categories.length > 0 && !meal.category.some(c => categories.includes(c))) {\n      return false;\n    }\n\n    // Filter by tags\n    if (tags.length > 0 && !meal.tags.some(t => tags.includes(t))) {\n      return false;\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      const matchesName = meal.name.toLowerCase().includes(query);\n      const matchesDescription = meal.description.toLowerCase().includes(query);\n      const matchesTags = meal.tags.some(tag => tag.toLowerCase().includes(query));\n      \n      if (!matchesName && !matchesDescription && !matchesTags) {\n        return false;\n      }\n    }\n\n    // Filter by max calories\n    if (maxCalories && meal.dietaryInfo.calories > maxCalories) {\n      return false;\n    }\n\n    // Filter by max prep time\n    if (maxPrepTime && meal.prepTime > maxPrepTime) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nexport const generateMealPlan = ({\n  selectedDates = [],\n  selectedMealTypes = [],\n  preferences = '',\n  dietaryRestrictions = [],\n  calorieTarget = null,\n}) => {\n  // Filter meals based on preferences and restrictions\n  let availableMeals = getMealsByFilters({\n    categories: selectedMealTypes,\n    tags: dietaryRestrictions,\n    maxCalories: calorieTarget,\n  });\n\n  // Create a meal plan for each day\n  const mealPlan = selectedDates.map(date => {\n    const dayPlan = {};\n    \n    selectedMealTypes.forEach(mealType => {\n      // Filter meals for this specific meal type\n      const mealsForType = availableMeals.filter(meal => \n        meal.category.includes(mealType)\n      );\n\n      // Randomly select a meal for this type\n      const randomIndex = Math.floor(Math.random() * mealsForType.length);\n      dayPlan[mealType] = mealsForType[randomIndex];\n    });\n\n    return {\n      date,\n      meals: dayPlan,\n    };\n  });\n\n  return mealPlan;\n};\n\nexport const getMealCategories = () => mealCategories;\n\nexport const getDietaryTags = () => dietaryTags;\n\nexport const getMealById = (id) => meals.find(meal => meal.id === id);\n\nexport const getRelatedMeals = (meal, limit = 3) => {\n  if (!meal) return [];\n\n  // Find meals with similar tags or categories\n  const relatedMeals = meals\n    .filter(m => m.id !== meal.id) // Exclude the current meal\n    .map(m => {\n      // Calculate similarity score based on shared tags and categories\n      const sharedTags = m.tags.filter(tag => meal.tags.includes(tag)).length;\n      const sharedCategories = m.category.filter(cat => meal.category.includes(cat)).length;\n      \n      return {\n        ...m,\n        similarityScore: (sharedTags * 2) + sharedCategories, // Tags are weighted more heavily\n      };\n    })\n    .sort((a, b) => b.similarityScore - a.similarityScore)\n    .slice(0, limit);\n\n  return relatedMeals;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}